server.port=12345

spring.datasource.url=jdbc:sqlserver://localhost;databaseName=springbootdb
spring.datasource.username=sa
spring.datasource.password=admin@123
spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.jpa.show-sql=true
spring.jpa.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
Sub CopyTableFromMailToExcel()

  Dim objOutlook As Object
  Dim objMail As Object
  Dim objSelection As Object
  Dim objSheet As Worksheet
  Dim rng As Range
  Dim strSubject As String
  Dim i As Long

  ' Set the subject of the emails to search for
  strSubject = "Your Target Subject Here" 

  ' Create an Outlook application object
  Set objOutlook = CreateObject("Outlook.Application")

  ' Get the Inbox folder
  Set objInbox = objOutlook.GetNamespace("MAPI").GetDefaultFolder(6) ' 6 represents Inbox

  ' Loop through all emails in the Inbox
  For Each objMail In objInbox.Items
    If objMail.Subject = strSubject Then

      ' Create a new Excel workbook and worksheet
      Set objExcel = CreateObject("Excel.Application")
      Set objWorkbook = objExcel.Workbooks.Add
      Set objSheet = objWorkbook.Sheets(1)

      ' Find the table in the email body
      Set objSelection = objMail.Body

      ' **This part needs refinement based on the table's HTML structure**
      ' Example: If the table is within a specific HTML tag 
      ' (This is a simplified example and might need adjustments)
      strTableHTML = Mid(objSelection, InStr(objSelection, "<table>"), InStr(objSelection, "</table>") - InStr(objSelection, "<table>") + 8) 

      ' Paste the table HTML into the Excel sheet
      objSheet.Range("A1").Select
      objSheet.PasteSpecial Format:=8 

      ' Save the Excel file (adjust the file path and name as needed)
      objWorkbook.SaveAs "C:\Path\To\Save\EmailTable_" & Format(Now, "yyyymmdd_hhmmss") & ".xlsx"

      ' Close and release Excel objects
      objExcel.Quit
      Set objExcel = Nothing
      Set objWorkbook = Nothing
      Set objSheet = Nothing

    End If
  Next objMail

  ' Release Outlook objects
  Set objOutlook = Nothing
  Set objMail = Nothing
  Set objSelection = Nothing

End Sub

Explanation:
 * Define Variables:
   * objOutlook: To represent the Outlook application object.
   * objMail: To represent each email in the Inbox.
   * objSelection: To store the selected content (the email body).
   * objSheet: To represent the active worksheet in the Excel workbook.
   * rng: To represent a range of cells in the Excel sheet.
   * strSubject: To store the subject of the emails to search for.
   * i: A loop counter.
 * Set Subject:
   * Replace "Your Target Subject Here" with the actual subject of the emails you want to process.
 * Create Outlook Object:
   * Set objOutlook = CreateObject("Outlook.Application") creates an instance of the Outlook application.
 * Get Inbox:
   * objOutlook.GetNamespace("MAPI").GetDefaultFolder(6) retrieves the Inbox folder.
 * Loop through Emails:
   * The For Each loop iterates through each email in the Inbox.
 * Check Subject:
   * If objMail.Subject = strSubject Then checks if the email's subject matches the target subject.
 * Create Excel Objects:
   * Creates a new Excel workbook and worksheet.
 * Find and Extract Table:
   * This part needs refinement:
     * The current code attempts to extract the table HTML using InStr to find the "<table>" and "</table>" tags.
     * This is a simplified example and might not work reliably depending on the actual HTML structure of the tables in your emails.
     * You may need to use more robust HTML parsing techniques (e.g., using regular expressions or a dedicated HTML parser library) to accurately extract the table content.
 * Paste Table to Excel:
   * objSheet.Range("A1").Select selects cell A1 in the worksheet.
   * objSheet.PasteSpecial Format:=8 pastes the extracted table HTML into the worksheet.
 * Save Excel File:
 * Saves the Excel workbook with a dynamic filename based on the current date and time.
 * Close and Release Objects:
 * Closes and releases all Excel objects.
 * Release Outlook Objects:
 * Releases all Outlook objects.
Important Notes:
 * Refine Table Extraction: The most crucial part is to accurately extract the table HTML from the email body. You might need to experiment with different methods to find the correct HTML tags and attributes based on the specific structure of your emails.
 * Error Handling: Consider adding error handling (e.g., On Error Resume Next) to gracefully handle potential errors during the process.
 * Security: Be mindful of security considerations when working with VBA and Outlook. Avoid running untrusted macros.
 * Customization: Adjust the code to fit your specific needs, such as:
   * Different subject criteria.
   * Different table structures.
   * Different file saving locations and names.
This code provides a basic framework. You'll need to adapt and refine it based on the specific characteristics of the emails and tables you're dealing with.
